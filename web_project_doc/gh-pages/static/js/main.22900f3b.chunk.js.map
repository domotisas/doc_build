{"version":3,"sources":["Linktomd.js","App.js","serviceWorker.js","index.js"],"names":["listLink","id","text","link","Emoji","props","react_default","a","createElement","className","role","aria-label","label","aria-hidden","symbol","SvgFb","Object","assign","width","height","viewBox","fillRule","fill","d","Link","_ref","onClick","e","map","item","key","href","concat","Linktomd_Emoji","Linktomd_SvgFb","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","saveStateToLocalStorage","localStorage","setItem","state","post","idActif","_this2","console","log","fetch","then","res","md","setState","catch","err","error","_this3","_this4","getItem","Linktomd","i","handleLinkClick","parseInt","react_markdown_default","source","escapeHtml","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.22900f3b.chunk.js","sourcesContent":["import React from 'react'\n\nconst listLink = [\n  { id: 1, text: 'Questions', link: 'devfront.md' },\n  { id: 2, text: 'B__E--M', link: 'bem.md' },\n  { id: 3, text: '8pt Grid system ', link: 'heightPtGridSys.md' },\n  { id: 4, text: 'Atomic Design Method', link: 'atomic_design_systeme_SK.md' },\n  { id: 5, text: 'Atomic Design exemples', link: 'atomic_design_exemples.md' },\n  { id: 6, text: 'Grids out of date ', link: 'grids.md' },\n  // { id: 7, text: 'React', link: 'react.md' },\n]\n\nconst Emoji = props => (\n  <span\n    className=\"emoji\"\n    role=\"img\"\n    aria-label={props.label ? props.label : ''}\n    aria-hidden={props.label ? 'false' : 'true'}\n  >\n    {props.symbol}\n  </span>\n)\n\nconst SvgFb = props => (\n  <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\" {...props}>\n    <g fillRule=\"nonzero\" fill=\"none\">\n      <path\n        d=\"M5 0h14a5 5 0 0 1 5 5v14a5 5 0 0 1-5 5H5a5 5 0 0 1-5-5V5a5 5 0 0 1 5-5z\"\n        fill=\"#ff7200\"\n      />\n      <path\n        d=\"M9.506 22h3.735l.002-10 3.393-.001L17 8.552h-3.759l.005-1.724c0-.9.061-1.38 1.347-1.38h2.375V2h-3.406c-3.3 0-4.06 1.711-4.06 4.522l.004 2.03L7 8.555V12h2.506v10z\"\n        fill=\"#FFF\"\n      />\n    </g>\n  </svg>\n)\n\nconst Link = ({ onClick, e, id }) => {\n  return (\n    <nav className=\"nav-block\">\n      <ul className=\"items-list\">\n        {listLink.map(item => (\n          <li key={item.id} className=\"items-list__item\">\n            <a\n              className={\n                id === item.id\n                  ? 'items-list__link items-list__link--actif'\n                  : 'items-list__link'\n              }\n              href={`#filename:~${item.link}/`}\n              onClick={e => {\n                onClick(item.link, e, item.id)\n              }}\n            >\n              {item.text}\n              {item.id === 5 && <Emoji symbol=\"ðŸ˜…\" />}\n              {item.id === 2 && <SvgFb className=\"svg--svg-baseline\" />}\n            </a>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  )\n}\n\nexport default Link\n","import React, { Component } from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport 'whatwg-fetch'\nimport './styles/App.scss'\nimport './styles/github.scss'\nimport './styles/styles.scss'\nimport Link from './Linktomd'\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      post: null,\n      idActif: ''\n    }\n    // this.handleLinkClick = this.handleLinkClick.bind(this)\n  }\n\n  saveStateToLocalStorage = () => {\n    // localStorage.setItem('state', JSON.stringify(this.state))\n    localStorage.setItem('post',this.state.post)\n    localStorage.setItem('id',this.state.idActif)\n  }\n  // componentDidMount() {\n  //   const state = localStorage.getItem('state')\n  //   const stor = JSON.parse(state)\n  //   console.log(`stor.idActif:${stor ? stor.idActif : null}`)\n  //   if (state) {\n  //     this.setState(JSON.parse(state))\n  //   }\n  // }\n\n  load(link) {\n    console.log(`./md_file/${link}`, 'clicked', 'this:', this)\n    fetch(`./md_files/${link}`)\n    .then(res => res.text())\n    .then(md => this.setState({ post: md }) )\n    .catch((err) => console.error(err));\n  }\n\n  handleLinkClick(link,e,id) {\n    // console.log(link,e.target,id);\n    fetch(`./md_files/${link}`)\n      .then(res => res.text())\n      .then(md => this.setState({ post: md },this.saveStateToLocalStorage) )\n\n    // add link id to state then to localStorage\n    this.setState({idActif: id},this.saveStateToLocalStorage)\n  }\n\n  render () {\n    const {post} = this.state ? this.state : localStorage.getItem('post')\n    // console.log(post ? 'true' : localStorage.getItem('post'))\n    return (\n      <div className=\"container\">\n        <Link\n          onClick={ (i,e,id) => {this.handleLinkClick(i,e,id)} }\n          id={this.state.idActif !== '' ? this.state.idActif : parseInt((localStorage.getItem('id'))) }\n        />\n        <div className=\"markdown-body\">\n          <ReactMarkdown source={post ? post : localStorage.getItem('post')} escapeHtml={false} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}